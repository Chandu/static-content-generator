import groovy.io.FileType
import org.thymeleaf.TemplateEngine
import org.thymeleaf.templateresolver.*
import org.thymeleaf.context.Context
import com.eclipsesource.json.*
import groovy.json.JsonSlurper

buildscript {
  repositories {
    jcenter()
    maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
  }
  dependencies {
    classpath "org.thymeleaf:thymeleaf:3.0.0.BETA02"
    classpath "com.github.robfletcher:compass-gradle-plugin:2.0.6"
    classpath "com.eclipsesource.minimal-json:minimal-json:0.9.4"
  }
}

repositories {
  mavenCentral()
}

task copyAssets(type: Copy) {
  from('src/main/assets') {
    exclude 'lib/bootstrap/images'
    exclude 'lib/bootstrap/javascripts/bootstrap'
    exclude 'lib/bootstrap/javascripts/bootstrap-*'
    exclude 'lib/bootstrap/stylesheets'
    exclude 'scss'
  }
  into 'build/site/assets'
  //exclude '**/*.bak'

  includeEmptyDirs = false

  //with dataContent
}

apply plugin: "com.github.robfletcher.compass"
compass {
  cssDir = file('build/site/assets/css')
  sassDir = file('src/main/assets/scss')
  importPath = files('src/main/assets/lib/bootstrap/stylesheets')
}

/* These three tasks build our site */
task generateSite(type: Generate, group: "Site Generator", dependsOn: ['compassCompile', 'copyAssets'], description: "Outputs site to build directory") {
}

task("preview", group: "Site Generator", dependsOn:"generateSite", description: "Opens site with Safari") << {
  "open -a safari file://${file("build/site").absolutePath}/index.html".execute()
}

class Generate extends DefaultTask {
  File templateRoot = project.file("src/main")

  @InputDirectory
  File srcContent = project.file("src/main/content")
  @InputDirectory
  File srcTemplates = project.file("src/main/templates")

  @OutputDirectory
  File generatedFileDir = project.file("${project.buildDir}/site")

  @TaskAction
  public void perform() {
    def templateEngine = createTemplateEngine()
    def json = Json.parse("{}")
    def jsonFile = new File("${srcContent}/app.json")
    if (jsonFile.exists()) {
      json = Json.parse(jsonFile.text)
    }
    srcContent.eachFileRecurse(FileType.FILES) { f ->
      def template = getTemplateFromFile(f)
      if (template) {
        processThymeleafTemplate(templateEngine, f, template, json)
      }
      else {
        //copyFileWithoutProcessing(f)
      }
    }
  }

  /* Instantiate the Thymeleaf templating engine */
  private TemplateEngine createTemplateEngine() {
    TemplateEngine templateEngine = new TemplateEngine()
    FileTemplateResolver fileTemplateResolver = new FileTemplateResolver()
    fileTemplateResolver.setTemplateMode("HTML")
    fileTemplateResolver.setPrefix("${templateRoot}/")
    fileTemplateResolver.setSuffix(".html")
    templateEngine.setTemplateResolver(fileTemplateResolver)

    return templateEngine
  }


  /* Return a thymeleaf template if the file is an HTML page and contains a template meta tag, otherwise return null */
  public String  getTemplateFromFile(file) {
    if (!file.absolutePath.endsWith(".html")) {
      return null
    }

    def template = null
    def root = new XmlSlurper().parse(file)
    root.head.meta.each { meta ->
      if (meta.@name == "template") {
        template = meta.@content
      }
    }

    return template
  }


  /* Run a file through Thymeleaf using the specified template */
  public void processThymeleafTemplate(templateEngine, f, template, globalJson) {
    println("Processing ${f} with template:${template}")
    def json = globalJson
    def jf = project.file("${f}".replaceAll(".html", ".json"))
    if (jf.exists()) {
      println("Processing JSON: ${jf}")
      json = Json.parse("{}")
      json.merge(globalJson)
      json.merge(Json.parse(jf.text))
    }
    def jsonSlurp = new JsonSlurper()
    Context context = new Context(Locale.US, [page:getTemplateForFile(f), json:jsonSlurp.parseText(json.toString())])
    createFileWithDirectories(f).write(templateEngine.process(template, context))
  }


  /* Creates a file including any directories along the path which do not exist */
  def createFileWithDirectories(f) {
    def filePath = f.absolutePath
    def relativePath = srcContent.toURI().relativize(f.toURI()).toString()
    def newFile = project.file("${generatedFileDir}/${relativePath}")
    newFile.getParentFile().mkdirs()
    return newFile
  }


  /**
   *  calculate the template reference for given file.
   *  calculated reference will be correctly resolved by file template resolver
   */
  public String  getTemplateForFile(f) {
    def filePath = f.absolutePath
    def relativePath = templateRoot.toURI().relativize(f.toURI()).toString()
    return relativePath.replaceAll(".html", "")
  }

}
