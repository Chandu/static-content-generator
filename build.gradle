import groovy.io.FileType

import org.thymeleaf.TemplateEngine
import org.thymeleaf.templateresolver.*
import org.thymeleaf.context.Context

import com.eclipsesource.json.*
import groovy.json.JsonSlurper

import io.bit3.jsass.CompilationException;
import io.bit3.jsass.Compiler;
import io.bit3.jsass.Options;


buildscript {
  repositories {
    jcenter()
    maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
  }
  dependencies {
    classpath "io.bit3:jsass:5.0.0"
    classpath "org.thymeleaf:thymeleaf:3.0.0.BETA02"
    classpath "com.eclipsesource.minimal-json:minimal-json:0.9.4"
  }
}

repositories {
  mavenCentral()
}


apply plugin:'base'


/* These tasks build our site */

task copyAssets(type: Copy) {
  from('src/main/assets') {
    exclude 'lib/bootstrap/images'
    exclude 'lib/bootstrap/javascripts/bootstrap'
    exclude 'lib/bootstrap/javascripts/bootstrap-*'
    exclude 'lib/bootstrap/stylesheets'
    exclude 'scss'
  }
  into 'build/site/assets'
  //exclude '**/*.bak'

  includeEmptyDirs = false

  //with dataContent
}


task compileSass(type: CompileSass, group: "Site Generator", description: "Compile site stylesheets") {
}


task generateSite(type: GenerateHtml, group: "Site Generator", dependsOn: ['compileSass', 'copyAssets'], description: "Outputs site to build directory") {
}


task("preview", group: "Site Generator", dependsOn:"generateSite", description: "Opens site with Safari") << {
  "open -a safari file://${file("build/site").absolutePath}/index.html".execute()
}


/**
 * compile Sass files with the aid of jsass.
 * jsass use libsass (native implementation of sass compiler), thus
 * this task will be functional on Windows, Linux, add Mac OS
 */
class CompileSass extends DefaultTask {
  @InputDirectory
  def sassDir = project.file('src/main/assets/scss')
  @InputFiles
  def importPath = project.files('src/main/assets/lib/bootstrap/stylesheets')

  @OutputDirectory
  def cssDir = project.file('build/site/assets/css')

  String sasscCmd = '/usr/bin/sassc'
  String[] sasscArgs;

  Compiler compiler = new Compiler();
  Options options = new Options();


  @TaskAction
  public void perform() {
    initCompiler()
    processScssDir(sassDir)
  }


  /**
   * Sass compiler initialization
   * TODO: more configuration parameters could be handled here
   * see http://jsass.readthedocs.org/en/latest/options.html
   */
  def initCompiler() {
    sasscArgs = new String[importPath.size() * 2 + 3]
    sasscArgs[0] = sasscCmd
    def argCnt = 1
    if (importPath != null) {
      importPath.each { f ->
        if (sasscCmd != null) {
          sasscArgs[argCnt++] = "-I"
          sasscArgs[argCnt++] = "${f.absolutePath}"
        } else {
          options.getIncludePaths().add(f);
        }
      }
    }
  }


  /**
   * go through specified dir, containing SCSS files and compile them
   */
  def processScssDir(f) {
    f.eachDir() { d ->
      processScssDir(d)
    }
    f.eachFileMatch(~/^[^_].*\.scss/) {file ->
      compileSass(file)
    }
  }


  /**
   * compile given SCSS file
   */
  def compileSass(File f) {
    URI inputFile = f.toURI();
    File oF = getOutputFile(f)
    oF.createNewFile()
    URI outputFile = oF.toURI();

    if (sasscCmd != null) {
      //def cmdToRun = "${sasscCmd} ${sasscArgs} ${f} ${oF}"
      //println "Start sassc: '${cmdToRun}'"
      String inFile = "${f}"
      String outFile = "${oF}"
      def argCnt = sasscArgs.length
      sasscArgs[argCnt - 2] = inFile
      sasscArgs[argCnt - 1] = outFile
      def process = new ProcessBuilder(sasscArgs)
        .inheritIO()
        //.redirectErrorStream(true)
        .start()
      process.waitFor();
      def retVal = process.exitValue()
      if (retVal == 0) {
        println("Compiled successfully");
      } else {
        println("Reurn value = '${retVal}'")
      }
    } else {
      try {
        oF.write(compiler.compileFile(inputFile, outputFile, options).getCss())

        println("Compiled successfully");
      } catch (CompilationException e) {
        println("Compilation of '${inputFile}' to '${outputFile}' failed.");
        println(e.getErrorText());
      }
    }
  }


  /**
   * get the CSS file, which should contain compilation results
   */
  def getOutputFile(f) {
    def filePath = f.absolutePath
    def relativePath = sassDir.toURI().relativize(f.toURI()).toString()
    def newFile = project.file("${cssDir}/${relativePath}" - '.scss' + '.css')
    //newFile.createNewFile()
    //newFile.getParentFile().mkdirs()

    return newFile
  }
}


/**
 * generate static html files from Thymeleaf templates
 */
class GenerateHtml extends DefaultTask {
  File templateRoot = project.file("src/main")

  @InputDirectory
  File srcContent = project.file("src/main/content")
  @InputDirectory
  File srcTemplates = project.file("src/main/templates")

  @OutputDirectory
  File generatedFileDir = project.file("${project.buildDir}/site")


  def templateEngine = createTemplateEngine()
  // application-wide JSON object (available for each page)
  def globalJson = Json.parse("{}")

  @TaskAction
  public void perform() {
    init()

    processSourceDir(srcContent)
  }


  /**
   * initialization
   */
  def init() {
    def jsonFile = new File("${srcContent}/app.json")

    if (jsonFile.exists()) {
      globalJson = Json.parse(jsonFile.text)
    }
  }


  /**
   * instantiate the Thymeleaf templating engine
   */
  private TemplateEngine createTemplateEngine() {
    TemplateEngine templateEngine = new TemplateEngine()
    FileTemplateResolver fileTemplateResolver = new FileTemplateResolver()
    fileTemplateResolver.setTemplateMode("HTML")
    fileTemplateResolver.setPrefix("${templateRoot}/")
    fileTemplateResolver.setSuffix(".html")
    templateEngine.setTemplateResolver(fileTemplateResolver)

    return templateEngine
  }


  /**
   * go through specified dir, containing HTML files and process them
   */
  def processSourceDir(root) {
    root.eachDir() { d ->
      processSourceDir(d)
    }
    root.eachFileMatch(~/^[^_].*\.html/) {file ->
      processThymeleafFile(file)
    }
  }


  /**
   * process given Thymeleaf file
   */
  public void processThymeleafFile(f) {
    def template = "content/${getPageNameForFile(f)}"
    println("Processing ${f}")
    Context context = new Context(Locale.US,
      [json: getJsonForFile(f)])

    getOutputFile(f).write(templateEngine.process(template, context))
  }


  /**
   * get the JSON "back-end" object, available for the specified Thymeleaf file
   */
  def getJsonForFile(f) {
    def json = globalJson
    def jf = project.file("${f}" - ".html" + ".json")
    if (jf.exists()) {
      println("Processing JSON: ${jf}")
      json = Json.parse("{}")
      json.merge(globalJson)
      json.merge(Json.parse(jf.text))
    }
    def jsonSlurp = new JsonSlurper()

    return jsonSlurp.parseText(json.toString())
  }


  /**
   *  calculate the page name (outcome) for given file.
   */
  public String  getPageNameForFile(f) {
    def filePath = f.absolutePath
    def relativePath = srcContent.toURI().relativize(f.toURI()).toString()
    return relativePath - ".html"
  }


  /* Creates a file including any directories along the path which do not exist */
  def getOutputFile(f) {
    def filePath = f.absolutePath
    def relativePath = srcContent.toURI().relativize(f.toURI()).toString()

    return  project.file("${generatedFileDir}/${relativePath}")
  }
}
